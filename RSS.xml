<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
<channel>
    <title>KB's Lair</title>
    <image>
      <url>https://pigamer37.github.io/images/favicon.png</url>
      <title>KB's Lair</title>
      <link>https://pigamer37.github.io</link>
    </image>
    <link>https://pigamer37.github.io/</link>
    <atom:link href="https://pigamer37.github.io/RSS.xml" rel="self" type="application/rss+xml"/>
    <description>A personal website where I talk about personal topics, electronics and robotics, music, etc. Made from scratch</description>
    <category>Personal</category>
    <category>Electronics</category>
    <category>Robotics</category>
    <category>Music</category>
    <language>en-us</language>
    <docs>https://www.rssboard.org/rss-specification</docs>
    <!--RFC 2822 - https://timestampgenerator.com/-->
    <lastBuildDate>
      Wed, 23 Jul 2025 17:10:33 GMT
    </lastBuildDate>
    <pubDate>Wed, 23 Jul 2025 17:10:33 GMT</pubDate>
    <ttl>60</ttl>
    <item>
      <title><![CDATA[I made a Stremio Addon]]></title>
      <link>https://pigamer37.github.io/posts/I_made_a_Stremio_Addon</link>
      <description><![CDATA[An explanation about what Stremio is and why I made an addon for it]]></description>
      <content:encoded> <![CDATA[ 
        <h2>Do you know what Stremio is?</h2>
              <img style="float:left;max-height:100%;max-width:30%;shape-outside:polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%) content-box;shape-margin:.5em;margin:0 .5em .5em 0" decoding="async" class="center animate slideL fullEntry" src="https://www.stremio.com/website/stremio-logo-small.png" alt="Stremio logo" fetchpriority="high">
              <p><a href="https://www.stremio.com" target="_blank">Stremio</a> is an open source streaming platform, which has been my go to for a while now. <a href="https://guides.viren070.me/stremio" target="_blank">Here's a super thorough guide about what Stremio is and how to set it up</a>. It's very easy to use and makes it possible to access almost everything I want to watch thanks to the modularity on which it is built.</p>
              <p>What do I mean by modularity? Everything works based on a protocol defined by the platform, which requests resources to the addons the user has installed. For example, you may have an addon that has a list for the trending page on Netflix, if you click on a series, another addon may get the metadata (title, release date, cast...) from IMDB, another addon may get you some links where you can watch it, and when you click on an episode another addon may gather subtitles from OpenSubtitles. The thing is you don't have to think about any of this. All you need to do is "install" (that's the word they use, but you don't have to download anything, they get saved on your account) the addons you want once and all of that will be done in the background, and displayed to you in a user friendly way like in any other streaming service. Also, the stock official addons make it very much usable except for providing the content itself, so you'll have to look out for stream addons (which give access to the streams/videos themselves). You can find info about these on <a href="https://www.reddit.com/r/StremioAddons/top/?t=all" target="_blank">the Stremio Addons subreddit</a> or use <a href="https://beta.stremio-addons.net/" target="_blank">a list of community addons</a> (I personally followed <a href="https://x.com/political_moods/status/1582682409501589504?t=swT_Y50s2CAfLkfmQbe07w" hreflang="es-ES" target="_blank">this guide</a>, but it is written in spanish). Now you know it and maybe I made you discover your new favorite platform, but...</p>
              <h2>Why did I make an addon?</h2>
              <p>As you may have seen, there's A BUNCH of addons, for many different purposes. And I just use the stock addons (Cinemeta, OpenSubtitles v3...), a stream provider one and the fantastic <a href="https://beta.stremio-addons.net/addons/mal-stremio-addon" target="_blank">MAL-Stremio Addon</a> anyways. So why make one?</p>
              <figure class="animate slideR fullEntry" style="margin:0 0 .5em .35em;text-align:center;width:clamp(30%,136px,100%);display:table;float:right">
              <img decoding="async" style="width:100%;max-width:120px" class="center" src="https://i.imgur.com/VZK8qw2.jpeg" alt="Buta no Subs Stremio Addon Logo" fetchpriority="high">
              <figcaption style="display:table-caption;caption-side:bottom">The Buta no Subs Stremio Addon Logo, made by the friend I made the addon for</figcaption></figure>
              <p>A dear friend of mine studies Japanese by himself. A lot of the time, Animelon had subtitles which timing was offset from the video, which made it tedious or impossible to use, so I recommended the platform to him, because it has a subtitle timing offset feature built right in. That's where the problem arose: the base subtitle addons didn't usually return results in Japanese, and the one community addon that claimed it would didn't work either.</p>
              <p>I don't know Japanese at all, but I didn't let that stop me. So, with <a href="https://github.com/Pigamer37/letterboxd-stremio-addon" target="_blank">a failed addon project</a> on my past, I cloned that repo to get a "template" and started researching the protocol (again), japanese subtitle providers, and started making changes. I had a working prototype within 3 days, which was a surprise even for myself! I just had to wait for the Stremio team to help me with a bug on the tool they provide to publish addons. I opened issues, wrote emails, and waited while making improvements on the addon... But I finally was tired of waiting and published it on <a href="https://render.com/" target="_blank">Render</a>. The project has changed a lot since then, adding more subtitle sources and changing the flow of the program so it is faster and more accurate. There's still progress to be made, because this is one of my first experiences using Node.js, Express.js, and doing backend, so the code is not the cleanest, for example. The current list of issues and future enhancements will always be updated on the <a href="https://github.com/Pigamer37/buta-no-subs-stremio-addon" target="_blank">GitHub repository</a>, so feel free to check it out and/or contribute to it there!</p>
      ]]> </content:encoded>
      <category>Programming</category>
      <pubDate>Wed, 23 Jul 2025 17:10:33 GMT</pubDate>
      <guid>https://pigamer37.github.io/posts/I_made_a_Stremio_Addon</guid>
    </item>
    <item>
    	<title><![CDATA[The Literal Legend of Zelda]]></title>
    	<link>https://pigamer37.github.io/posts/The_Literal_Legend_of_Zelda</link>
    	<description><![CDATA[A theory about the Zelda series and timeline/continuity]]></description>
    	<content:encoded> <![CDATA[ 
    		<h2>You probably know The Legend of Zelda... or do you?</h2>
              <p>The classic game series is a Nintendo staple, and with the huge presence the Switch console has had during its lifespan (the Switch 2 is just around the corner when writing this), many gamers know the postapocalyptic, <i>magic-techy</i>, cellshaded version of Hyrule that <cite><abbr title="The Legend of Zelda">TLOZ</abbr>: Breath of the Wild</cite> (and its sequel <cite><abbr>TLOZ</abbr>: Tears of the Kingdom</cite>) presented. These entries have shaped how many Zelda fans imagine these fantasy games, the world they take place in and the characters that live the stories. Many curious gamers may have wanted to know what happened before this, and maybe, they tried the <cite><abbr>TLOZ</abbr>: Skyward Sword</cite> remake that came out for the system, or even some other past entries thanks to the Nintendo Classics program. They surely were surprised to see that these games have many similarities, yes, but also many differences with the most modern iteration. Even between the past ones there are countless discrepancies in designs and lore.</p>
              <p>I must admit I am not the most experienced fan, as I don't own a Switch and have only played <cite><abbr>TLOZ</abbr>: Twilight Princess</cite> (one of my favorite games) on the Wii. Total sin, I know, as in that console (to my knowledge) I could play <cite><abbr>TLOZ</abbr>: <abbr title="Skyward Sword">SS</abbr></cite>, <cite><abbr>TLOZ</abbr>: Wind Waker</cite>, and I think that <cite><abbr>TLOZ</abbr>: Ocarina of Time</cite> and <cite><abbr>TLOZ</abbr>: Majora's Mask</cite> are also playable in a collection. I want to play these games, as I have watched plenty of videos and YouTube essays about them, I just haven't gotten around to it. In any case, when <cite><abbr>TLOZ</abbr>: <abbr title="Breath of the Wild">BotW</abbr></cite> was about to come out, I knew <em style="font-style:italic">that</em> Link wasn't <em style="font-style:italic">my</em> Link, the Link I had come to know, love and see myself reflected on in our adventures with Midna. I expected this, as I knew that two Zelda games sharing a continuity &quot;correctly&quot;, or at least the way we usually expect sequels and prequels to work, is the exception, not the rule. The only major exceptions which feature strong connections that I know of (the <i>Child Timeline</i>) are:</p>
              <ul>
                <li><cite><abbr>TLOZ</abbr>: <abbr>SS</abbr></cite> is the start of the story un thus every other entry is a sequel. The lore it establishes never gets contradicted, that I know of</li>
                <li>The original <cite><abbr>TLOZ</abbr></cite> and it's direct sequel <cite>Zelda II: The Adventure of Link</cite> (I guess they gave up on connecting them after that, <i>amirite</i>?), which share a Link, simmilarly to:</li>
                <li><cite><abbr>TLOZ</abbr>: <abbr title="Ocarina of Time">OoT</abbr></cite> is followed (at least) by <cite><abbr>TLOZ</abbr>: <abbr title="Majora's Mask">MM</abbr></cite> (depending on how you interpret the game, some people theorize it's a dream or a metaphor for grief), and then <cite><abbr>TLOZ</abbr>: <abbr title="Twilight Princess">TP</abbr></cite>, in which the Hero of Time Link, the one in the previous two, has become the Hero's Spirit and teaches the &quot;current Link&quot;, the Hero of Twilight, how to swordfight (<a href="https://zelda.fandom.com/wiki/Hero%27s_Spirit#cite_note-:0-10" target="_blank">confirmed in <cite>Hyrule Historia</cite></a>)</li>
                <li><cite><abbr>TLOZ</abbr>: <abbr>BotW</abbr></cite> is followed <cite><abbr>TLOZ</abbr>: <abbr title="Tears of the Kingdom">TotK</abbr></cite>, and both of them supposedly serve as a merging of the three branching timelines (keep reading to know what I'm talking about) originating from <cite><abbr>TLOZ</abbr>: <abbr>OoT</abbr></cite></li>
              </ul>
              <p>Fans have speculated to no avail, and this &quot;canonicity&quot; issue has caused headaches to even the game creators themselves. Official timelines have been released at least two different times (that I know of), and sometimes they contradict each other, not to mention they both use branching timelines (or parallel universes, however you want to think about it) that separate depending on what happens in the ending of <cite><abbr>TLOZ</abbr>: <abbr>OoT</abbr></cite> to fit all of the games. I personally subscribe to the maybe ridiculous, but brilliant <a href="https://www.youtube.com/watch?v=Q-25c8Rsobw" target="_blank">timeline made by Brian David Gilbert in an episode of his <cite>Unraveled</cite> series</a> (check it out, it's both super ingenious and hilarious). <aside>To get a summary of the official timeline(s) released by Nintendo, watch the first 3m and 27s of <a href="https://www.youtube.com/watch?v=Q-25c8Rsobw" target="_blank">BDG's Unraveled Zelda timeline episode at Polygon</a>. What comes after is the real reason why I recommend the video later in the article.</aside> But, this got me thinking, and one day, out of the blue (not really, I was watching <cite><a href="https://youtube.com/playlist?list=PLAsBJ9eqcVm5hBkDJsvF31XP5F93Ylx2G&si=FIpQFAzpiyOB3CHm" target="_blank">Hero's Purpose</a></cite>, I think), a thought appeared in my mind. Simple and sweet, but satisfactory in this canonicity regard, at least to me: I thought about the name of the series, &quot;<cite>The <em style="text-decoration:underline"><strong>Legend</strong></em> of Zelda</cite>&quot;... What if the entire series are just that, a legend? <aside><cite><a href="https://youtube.com/playlist?list=PLAsBJ9eqcVm5hBkDJsvF31XP5F93Ylx2G&si=FIpQFAzpiyOB3CHm" target="_blank">Hero's Purpose</a></cite> is a fantastic series of fan-made YT videos that try to bridge the gap between <cite><abbr>TLOZ</abbr>: <abbr>MM</abbr></cite> and <cite><abbr>TLOZ</abbr>: <abbr>TP</abbr></cite>, explaining how the Hero of Time evolves after his journey and becomes the Hero's Spirit (you may recognise the armour in some of the thumbnails)</aside></p>
              <h2>Explaining what I mean by this</h2>
              <img style="float:left;max-height:100%;max-width:30%;shape-outside:polygon(54% 0%, 63% 4%, 57% 5.7%, 57% 19%, 77% 19%, 100% 28.3%, 65% 27%, 65% 91%, 50% 100%) content-box;shape-margin:.5em;margin:0 .5em .5em 0" decoding="async" class="center" src="https://www.zeldadungeon.net/wiki/images/thumb/c/c3/Master_Sword_TPHD_Art.png/160px-Master_Sword_TPHD_Art.png" alt="The Master Sword" fetchpriority="high">
              <p>Legends, myths, folk stories, they usually share an aspect: they are shared by word of mouth. What does this imply? Well, this means that details (or sometimes major story beats) usually get lost or modified depending on who is telling the story. This is not the best example, but think about most Disney adaptations. The original tales usually are much more brutal or grimm, even Pinocchio changed many things to be more family friendly. And well, we only know of these differences because the originals were written down, and the adaptations are movies, so we can compare. Imagine what tales that originated and mutated without these &quot;records&quot; have gone through. There's <a href="https://en.wikipedia.org/wiki/Folklore_studies" target="_blank">an entire branch of historical research dedicated to find these modifications in popular tales</a> (citing Wikipedia, I know, not the most reliable. Maybe <a href="https://guides.library.harvard.edu/folk_and_myth" target="_blank">Harvard is a better source</a>), and pinpoint where, when and how they happened. Some of you might suspect where I'm going with this: What if the <abbr>TLOZ</abbr> series' games were, as the name implies, versions of the same legend? This to me makes a lot of sense, as the main characters always share names, a general design or physical characteristics, and the most basic lore, like the Triforce, or even places like Lake Hylia are usually the same too. Also, not always, but most times, the story follows a usual medieval fairy tale structure: a hero (Link) must save a kingdom from an evil monster/villain (usually Ganon or Ganondorf, but the series has featured other antagonists), and this usually is acomplished, at least in part, by rescuing a princess (the titular Zelda). This is to say, in most games, the &quot;big story beats&quot; are the same, the main characters behave in similar ways, and the main &quot;gizmos&quot;, like the Triforce or the Master Sword, are also the same.</p>
              <figure style="margin:0 0 .5em .35em;text-align:center;width:clamp(45%,478px,100%);display:table;float:right;shape-outside:polygon(0% 89%, 49.9% 0%, 100% 89%, 100% 100%, 0% 100%) content-box;shape-margin:.5em">
              <img decoding="async" style="width:100%" class="center" title="The Triforce" src="https://gamepedia.cursecdn.com/zelda_gamepedia_en/9/9c/TLoZ_Series_Triforce_Artwork.png" alt="The Triforce, depicted with the three main characters (Zelda, Link and Ganondorf) in each triangle" fetchpriority="high">
              <figcaption style="display:table-caption;caption-side:bottom">The Triforce, depicted with the three main characters (Zelda, Link and Ganondorf) in each triangle</figcaption></figure>
              <p>At this point, this little idea of mine became my headcanon as I thought about it more (I still love BDG's timeline), and I wrote down the idea to write this very article in the (then) future. I recognise this is a pretty open and &quot;permissive&quot; theory, but I think this generality can also be a feature. <a href="https://www.gameinformer.com/interview/2023/12/07/aonuma-and-fujibayashi-talk-tears-of-the-kingdoms-reception-and-their-approach" target="_blank">The creators have gone on record</a> saying that: <blockquote cite="https://www.gameinformer.com/interview/2023/12/07/aonuma-and-fujibayashi-talk-tears-of-the-kingdoms-reception-and-their-approach">if we [the development team] get too into the weeds or too detailed in that placement, it results in kind of creating restraints for our creativity; the process of creating new ideas becomes restricted because we're so tied up and trying to make this fit into a very specific spot in the timeline. We do consider it, but not to an extent where we feel that our development process feels restricted or constrained.</blockquote> They don't get too commited to making any game fit in the timeline, especially if that means restricting their creativity. I interpret this as prioritizing good and creative gameplay and <em>storytelling</em> over fitting previously established lore. I read this interview after thinking about my theory, and it may be confirmation bias, but this statement feels really close to the reasons a storyteller might add, delete or emphasize aspects of a story to add some new meaning to it or make the original one stronger.</p>
              <p>As I said, maybe this theory isn't satisfactory to you, but I hope this article made you discover some Zelda fan pieces that I love, the games that came before the Switch, or at least made you think about the beautiful mess that is the Zelda continuity, and the nature of folklore and storytelling. And hey, <q cite="https://www.youtube.com/channel/UCo_IB5145EVNcf8hw1Kku7w">that's just a theory: a GAaa</q>... whoops! Wrong part of the internet XD</p>
    	]]> </content:encoded>
    	<category>VideoGames</category>
    	<pubDate>Tue, 15 Apr 2025 07:50:43 GMT</pubDate>
    	<guid>https://pigamer37.github.io/posts/The_Literal_Legend_of_Zelda</guid>
    </item>
    <item>
    	<title><![CDATA[UUIDv5 Explanation]]></title>
    	<link>https://pigamer37.github.io/posts/UUIDv5_Explanation</link>
    	<description><![CDATA[An explanation on how UUIDv5's worn and how to generate them with browser JS]]></description>
    	<content:encoded> <![CDATA[ 
    		<h1>Introduction</h1>
              <p>So, I was pondering how to support the <a href="https://podcasting2.org/podcast-namespace/tags/guid" target="_blank">&lt;podcast:guid&gt; tag of the podcasting 2.0 namespace</a> in <a class="no-external" href="https://kbs-lucas.nekoweb.org/RSS-Gen-Podcast.html" target="_blank">my RSS Feed Generator for podcasts</a>, and I was reading the documentation. First, I discover that the guid is a <abbr title="Universally Unique IDentifier version 5">UUIDv5</abbr> string. I make some research, and find out that <abbr title="Universally Unique IDentifier version 5">UUIDv5</abbr> stands for Universally Unique Identifier version 5, also known as <abbr title="Globally Unique IDentifier">GUID</abbr> (or Globally Unique IDentifier). Okay, makes sense, the tag docs mention that its purpose is to identify the podcast. They also provide two different tools to generate this kinds of strings online: <a href="https://www.uuidtools.com/v5" target="_blank">UUID Tools</a> and <a href="https://tools.rssblue.com/podcast-guid" target="_blank">RSS Blue</a>, and I check that, providing the same parameters (including the podcast namespace, with UUID of ead4c236-bf58-58c6-a2c6-a6b28d128cb6) they spit out the same result. I try inspecting both pages to get the code they use, but everything is either obfuscated or wrapped in what I think is jQuery layers of callbacks. I start looking for already made code, of which I only find npm packages (not applicable because I'm doing this in browser JS, not node, which uses different types and API's in this specific case) and a very incomplete implementation in C in the specification. Speaking of <a href="https://www.rfc-editor.org/rfc/rfc4122#section-4.3" target="_blank">the specification</a>, it failed to mention some very important details, but it super helpfully made a point to reiterate the endianness of the data needed for the algorithm multiple times /j. I ended up finding a super short npm package I can't find anymore, I studied its code and ended up adapting it to what I needed. The clever bits of the code, like using padStart(), or applying a regular expression to filter the namespace, are thanks to that package. So for anyone trying to implement UUIDv5's in browser JS, here's the code, and for anyone wanting to understand the standard or implement it in other languages, here's also a thorough explanation:</p>
              <h1>The explanation</h1>
              <p>UUIDv5's are deterministic, meaning that, as mentioned before, the same inputs will always produce the same outputs. Version 4 UUIDs are not, for example, they depend on the time they were generated. You could argue that really they are also deterministic (and therefore all computing, probably) and that time is another input, but that's another conversation we won't be having today. This is the "byte anatomy" of any UUID.</p><pre class="CascadiaCode" style="text-align:center">
0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                          time_low                             |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|       time_mid                |         time_hi_and_version   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|clk_seq_hi_res |  clk_seq_low  |         node (0-1)            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                         node (2-5)                            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</pre>
              <p>Once you know how a UUID looks (something like <code>a5de3ad2-5d30-5c05-aa56-30c24b857264</code>), you'll start seeing v4 and v5's everywhere, as they aren't only used for podcasts, at least that was my experience. To know which UUID version you are seeing, look at the second group, and the first number should tell you, for example, the previous one was a v5 (<code>a5de3ad2-5d30-<strong style="color:red">5</strong>c05-aa56-30c24b857264</code>).</p>
              <p>Version 5 requires 2 inputs, a namespace (there's also standard namespaces), and the string to encode. As an example, we will be generating a guid for a podcast which RSS feed resides in https://media.example.com/feed.xml/. This means our namespace is "<code>ead4c236-bf58-58c6-a2c6-a6b28d128cb6</code>" and our input string will be "media.example.com/feed.xml" (protocol scheme and trailing slashes stripped off, as mandated by the podcast 2.0 specification). We will be using arrays, so we can control byte order, and we will need bit logic, so make sure you know that kind of syntax in your language of choice.</p>
              <p><strong>"Accessibility" notice:</strong> code is rendered with the <a href="https://github.com/microsoft/cascadia-code" target="_blank">Cascadia Code font</a>, which is open source and made by Microsoft, designed to be used in the Visual Studio IDE, with ligatures, making some characters look different. For example, !== becomes <code>!==</code>, and => becomes <code>=></code>. I find this useful for reading (especially JS code), but if you don't, feel free to copy the code and paste it somewhere else with a different font without ligatures, and the characters will show up normaly.</p>
              
              <ol><li><h3>Dealing with the namespace</h3>
              <p>First, we need to process the namespace. Take that string, eliminate or ignore the dashes, take it pair by pair of characters, and translate each pair to its corresponding hexadecimal value; take those values and store them in an array. In the following function, a regular expression is used inside the array's <code>replace()</code> method to separate the pairs, and a function that takes each one (labeled as <code>hex</code>, for hexadecimal) and plugs them into <code><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt" target="_blank">parseInt()</a></code> to make the translation from a hexadecimal string representing a byte to its integer value (<noscript style="color:red">if you enable JavaScript, </noscript>you can copy it with a button that appears by hovering over the code on desktop or pressing it on mobile):</p>
              <pre><code class="language-js">function uuidToBytes(uuid) {
  let bytes = [];
  uuid.replace(/[a-fA-F0-9]{2}/g, function(hex) { bytes.push( parseInt(hex, 16) ) });
  return bytes;
}</code></pre></li>
              <li><h3>Dealing with the string input or "name"</h3>
              <p>If you just look at the code, this may look equivalent to what we just did to the namespace, but don't be fooled, my friend. This time we need to take the input and translate <strong>each character</strong> to it's UTF-16 char code, then store those values in an array. There's a convenient function in JavaScript that let's us do exactly that, <code><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt" target="_blank">charCodeAt()</a></code>. Here I initialize the array differently, but don't be scared:</p>
              <pre><code class="language-js">function stringToBytes(str) {
  let bytes = new Array(str.length);
  for(let i = 0; i < str.length; i++) { bytes[i] = str.charCodeAt(i) }
  return bytes;
}</code></pre></li>
              <li><h3>SHA-1 and "the promise"</h3>
              <p>Okay, now you have both inputs parsed as needed for our next step, applying the sha-1 encription/digest algorithm. For this, JS again comes to our aid (I wasn't going to implement it on my own, I don't know much about cryptography) with <code><a href="https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest" target="_blank">window.crypto.subtle.digest()</a></code>. This method returns a <code><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises" target="_blank">Promise</a></code> object that resolves to the encrypted string. We just need to pass the concatenation of the namespace with the "name" as the argument. This particular method, in JS, needs us to specify <code>'SHA-1'</code> as our first argument to select the algorithm, and requires the argument to encrypt to be a buffer. This is how we can get our sha-1 result:</p>
              <pre><code class="language-js">crypto.subtle.digest('SHA-1', new Uint8Array(namespace.concat(name)) )</code></pre></li>
              <li><h3>Getting our hash back</h3>
              <p>Let's call the result of the previous step <code>hash</code>. We now need to convert this into a manipulable byte array. This implies segmenting our result to the first 16 bytes, because sha-1 returns more bytes than we need, and in our JS case, turning that buffer into an array we can manipulate (because buffers aren't useful for what we want to do next):</p>
              <pre><code class="language-js">let bytes = Array.from( new Uint8Array(hash, 0, 16) );</code></pre></li>
              <li><h3>Byte logic</h3>
              <p>To comply with the UUIDv5 spec, we need to set some bits. Specifically, we need to turn the first half of byte 5 into a 5 in binary <code>(0b0101)</code> to specify the version, and set the first two bits of byte 7 to <code>0b10</code>. We can do each of this operations with a bitwise OR and an AND operation:</p>
              <pre><code class="language-js">bytes[6] = (bytes[6] & 0x0f) | 0x50;
bytes[8] = (bytes[8] & 0x3f) | 0x80;</code></pre>
              <p>To set the 5, we zero out the first half of the byte by bitwise ANDing with <code>0x0f (0b0000.1111)</code>, then setting it to 5 by ORing it with <code>0x50 (0b0101.0000)</code>. To set the <code>0b10</code>, we do a similar operation. First we zero the bits with a bitwise AND with <code>0x3f (0b0011.1111)</code> and then we set them with an OR with <code>0x80 (0b1000.0000)</code> (Added dots in binary notation for legibility).</p></li>
              <li><h3>Aaaand, from byte array to final string we gooooo!</h3>
              <p>Finally, take that manipulated byte array, and make each byte into a UTF-16 character (flip what we did in step 1 on it's head, it all comes full circle!). Place dahses after character 7, 11, 15 and 19. To do this in JS, we can use the handy <code>map()</code> method to apply the <code><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString" target="_blank">toString()</a></code> function to each element of the array. This can leave us with unique values instead of pairs, for example 'b' instead of '0b', so we use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart" target="_blank">padStart()</a> to detect and remedy those cases all in one. Then, <code>join('')</code> just converts the character array into a proper string object. To add the dashes, I use a template literal:</p>
              <pre><code class="language-js">let uuidS = bytes.map( v => v.toString(16).padStart(2,'0') ).join('');
uuidS = `${uuidS.substring(0,8)}-${uuidS.substring(8,12)}-${uuidS.substring(12,16)}-${uuidS.substring(16,20)}-${uuidS.substring(20)}`;</code></pre></li>
              </ol>
              <h2>All together, your 3 functions for success:</h2>
              <p>Here is all the steps we took, compiled into 3 functions with some additional error handling:</p>
              <pre><code class="language-js">function uuidToBytes(uuid) {
  let bytes = [];
  uuid.replace(/[a-fA-F0-9]{2}/g, function(hex){ bytes.push(parseInt(hex, 16)) });
  return bytes;
}
function stringToBytes(str) {
  let bytes = new Array(str.length);
  for(let i = 0; i < str.length; i++){bytes[i] = str.charCodeAt(i);}
  return bytes;
}
function v5(name, namespace) {
  if(typeof name === 'string') name = stringToBytes(name);
  if(typeof namespace === 'string') namespace = uuidToBytes(namespace);
  if(!Array.isArray(name)) throw TypeError('name must be an array of bytes');
  if(!Array.isArray(namespace) || namespace.length !== 16) throw TypeError('namespace must be uuid string or an Array of 16 byte values');
  return crypto.subtle.digest( 'SHA-1', new Uint8Array(namespace.concat(name)) ).then( hash => {
    let bytes = Array.from(new Uint8Array(hash, 0, 16));
    bytes[6] = (bytes[6] & 0x0f) | 0x50;
    bytes[8] = (bytes[8] & 0x3f) | 0x80;
    let uuidS = bytes.map(v => v.toString(16).padStart(2,'0')).join('');
    uuidS = `${uuidS.substring(0,8)}-${uuidS.substring(8,12)}-${uuidS.substring(12,16)}-${uuidS.substring(16,20)}-${uuidS.substring(20)}`;
    return uuidS;
  }).catch(e=>console.error(e));
}</code></pre>
              <p>Note that because crypto returns a <code>Promise</code>, I used the then syntax to do the next steps and return the final result. To use the code, you just need to paste the previous functions somewhere and call</p>
              <pre><code class="language-js">v5('media.example.com/feed.xml','ead4c236-bf58-58c6-a2c6-a6b28d128cb6').then(res=>{ })</code></pre>
              <p>and the string will be available inside the the then() statement as <code>res</code>. There's also async/await syntax, so use whatever you prefer.</p>
              <p>You can check it yourself, but both this code and the online tools mentioned return <code>a5de3ad2-5d30-5c05-aa56-30c24b857264</code> for our example inputs. You can use this to check your implementation is working right!</p>
              <p>This topic touched on many fields and techniques in programming, so I hope you found this interesting or useful in some way. Thanks for reading!</p>
    	]]> </content:encoded>
    	<category>Programming</category>
    	<pubDate>Tue, 4 Feb 2025 08:06:25 GMT</pubDate>
    	<guid>https://pigamer37.github.io/posts/UUIDv5_Explanation</guid>
    </item>
    <item>
    	<title>A Robot Thought</title>
    	<link>https://pigamer37.github.io/posts/A_Robot_Thought</link>
    	<description>A thought about my wish to become a robot</description>
    	<content:encoded> <![CDATA[ 
    		<h1>I think I want to become a robot</h1>
        <p>This is obviously a hypothetical, a possibility only in <span class="AddElectricCity">sci-fi</span> or in a very distant future when a consciousness/mind can be <span class="PixdorTwo">digitalized</span> and transferred to a simulated brain, inside a robot body. Yes, this has almost unending philosophical and metaphysical questions, like: Would the simulated brain behave the same as the real one? Would the process change the subject as a person fundamentally? Is the person the same person before and after the process, sort of in a Ship of Theseus kind of conundrum? I am not pondering these in this post, I assume this hypothetical can effectively "clone" someone, just making them into an electronic being. In any case, I wouldn't mind if the process was a little destructive or mutating, as I don't have much appreciation for the person I am, but that's also not the point of this article. With this basis in mind, I would like to offer a dream, or a wish I've had for a long time, and that takes much more potency in dark times: I would like to become a robot. There's many angles from which I've analyzed this, and I will try to explain this (what I assume to be, to many reading this) weird concept:</p>
        <ul>
          <li><h2>I don't like eating</h2>
          <p>All my life I've had a difficult relationship with food. I don't usually get hungry, I've always been very thin and I almost never enjoy eating. When I do, it's also a momentary pleasure. I would <span class="OctupleMax" style="padding-inline-end:.25em">gladly</span> take an option which made me able to stop eating or taking so much time doing it. There's some shakes that claim to have every vitamin and nutrient necessary for a balanced diet, I'm looking into those (with doubts). I admit that unless some long lasting energy source, like a mini nuclear reactor, is developed and substitutes batteries, becoming a robot wouldn't solve this issue entirely, if we compare eating to charging. But I don't know, I think I would prefer being plugged into a wall rather than having to decide and monitor what I eat each day, buy groceries, having to prepare it, and taking the time to eat it. Yes, even if that means forsaking those rare fleeting moments when I enjoy food. Also, related <span class="Acidic">bodily functions, <span style="color:Khaki">fluids</span> and <span style="color:SaddleBrown">solids</span></span> go away too! I understand I'm in the minority here, maybe I'm one of a kind, but I'm talking about me, this doesn't affect you in any way, you can keep enjoying meals :)</p></li>
          <li><h2>Being able to reproduce actions almost perfectly</h2>
          <p>As you may know, due to the nature of computing, achieving true randomness digitally is (depending on how you look at it) impossible. That's precisely what makes robots great for repetitive, precise tasks, like in manufacturing contexts. Being able to prepare a dish exactly right, or playing a song without mistakes and the same details and arrangements everytime are some ideas that come to mind. A counterpoint to this would be that sometimes, those little mistakes or inconsistencies are what make the end result memorable and human. Even if I agree with this (depending on the context), it's rare to see someone dedicated to their craft that doesn't practice and try to approach perfection or to be as reliable as possible.</p></li>
          <li><h2>Being able to be programmed/learn new things instantly (<span class="Yagiza" style="font-weight:normal">Matrix style</span>)</h2>
          <p>Have you ever thought about how amazing it would be if you could transfer, for example, a text book, directly to your brain? Or maybe someone's knowledge or muscular memory? In an abstract way, that's what downloading a program is. Some other programmer made the effort to develop and debug that software, but you can download it and replicate its behaviour. Imagine having proven instant sources of knowledge or skill. Want to do karate at black belt level? Download the karate program and the knowledge and muscular memory necessary are implanted in your brain. This is not a new concept, as I mentioned in this section's header, it famously appeared in <cite style="color:LimeGreen" class="OctupleMax">The Matrix</cite>, but I won't spoil it for you if you haven't seen it (it's a classic, you should watch it. Just don't get too caught up on its concepts, like many people do, it's just a sci-fi movie).</p></li>
          <li><h2>No more bad emotions</h2>
          <p>Yeah, I know this entails losing the good ones too. I don't care. I would like to do the things I want to do, that's it. No gratification, yes, but most importantly, no disappointment. This is maybe the most obvious and dramatic point. It has been said that intelligence (although I don't consider <span class="AddElectricCity">AI</span> real intelligence, it's just a massive algorithm under the hood, and at the very least it's not similar to human intelligence) and emotions are what will always separate human from machine. Again, if losing emotions is losing the human experience, I think I would accept.</p></li>
        </ul>
        <p>I am aware that this whole thing sounds like schizo-posting, or a little like the "men will do anything instead of going to therapy" meme, but this is my idea, this is how I feel about it. Maybe this helps someone, somehow, interpreted sort of like a poem. Maybe someday I will look back at this and not agree with it anymore, or even laugh at the idea. Maybe this reveals something deeper, darker or <span class="horror">more horrifying</span> about myself that I'm not catching. I don't know. I will leave you with a TL;DR I just came up with: "I want to be Turing complete but not pass the Turing test".</p>
    	]]> </content:encoded>
    	<category>Personal</category>
    	<category>Robotics</category>
    	<pubDate>Tue, 21 Jan 2025 19:04:46 GMT</pubDate>
    	<guid>https://pigamer37.github.io/posts/A_Robot_Thought</guid>
    </item>
    <item>
    	<title>RSS Explanation</title>
    	<link>https://pigamer37.github.io/posts/RSS_Explanation</link>
    	<description>An explanation of RSS technology, and a tutorial on how to consume and produce it</description>
    	<content:encoded><![CDATA[
      	<p>So, you want to learn about <abbr title="Really Simple Syndication">RSS</abbr>. You are in the right place, not because I'm an expert or something, but because I did some research XD. First of all:</p>
          <h1>What is <abbr title="Really Simple Syndication">RSS</abbr>?</h1>
          <p>(Before you go ahead, there's an extensive and detailed explanation in <a href="https://researchbuzz.me/2023/07/06/rss-2/" target="_blank">ResearchBuzz, written by Tara Calishain</a>. I'll try to be a little more brief). You can find a lot of explanations of the achronym, but the most used one is Really Simple Syndication. Nowadays, the main use for <abbr>RSS</abbr> is for podcasts <ins datetime="2025-01-16">(I'll talk about this use case later)</ins>. Years ago, Google had a product that made it easy to use RSS, but Google likes to kill lot of it's products for a variety of reasons, and Google Reader went down in 2013. I never used it, to be clear. I'm fairly new to <abbr>RSS</abbr>, and I only found out about it because I started building this website. <abbr>RSS</abbr> is basicaly a way to syndicate or publish content so that people that subscribe to it don't have to check the main source periodically. What does this mean? In the case of podcasts, users that subscribe to it are notified whenever a new episode comes out <ins datetime="2025-01-16">(and streaming platforms like Itunes or Spotify can update the podcast's content automatically from it)</ins>. In the case of news publishers or websites, subscribers can see when individual articles get published instead of having to check the site periodically. Also, you can use it to group all the sources you want to subscribe to in one place, and because of how it works nowadays, if used correctly by the publisher, you only get the content of the article, without any bloat from ads, navigation elements, etc. Sounds good, right? Let's get into it a bit further, both from a consumer and a producer perspective.</p>
          <h1>How do I use it?</h1>
          <p>First of all, you'll need a feed reader. There's a lot of both paid and free options, even some browsers like Opera or Firefox have built in ones (at least at the time of writing). I personally recomend <a href="https://www.inoreader.com/" target="_blank">Inoreader</a>. It's free (with a limited but generous number of feeds), multi&hyphen;platform, it has many quality of life features, like automatically finding feeds, and the paid version has features for filtering articles or note taking, for example. The article mentioned before discusses more options.</p>
          <p>Okay, now you have decided on a reader, let's find out how you can subscribe to feeds. Some readers do it for you, like I mentioned before, but they are not perfect. If the site author is nice (like me XD), there will be a symbol that looks something like this: <a href="/RSS.xml" target="_blank"><img loading="lazy" decoding="async" style="width:1em" src="https://i0.wp.com/researchbuzz.me/wp-content/uploads/2023/07/image5.png?resize=54%2C54&amp;ssl=1" alt="RSS logo"></a> If that's the case, you're in luck! Click it and you'll probably get a page ending in .xml (if you click the one I provided you'll get my feed as an example). That's the URL or link to the feed, provide it to your reader of choice and you are done, you'll get new articles when they are added. There's a possibility that instead of opening a page, your browser downloads a file, also ending in .xml. Woops! If you know how to inspect a page, do that and find the href attribute, if you don't, keep reading.</p>
          <p>If you weren't succesful by now, know that this is not your fault, the site is making it difficult for you (or your browser is a bit goofy). A variety of methods are discussed in <a href="https://researchbuzz.me/2023/07/06/rss-2/#h.qyamvhwjzs7" target="_blank">the ResearchBuzz article</a> I mentioned before, but I will show you the most effective ones. First, the browser extension route. There's a variety of extensions that try to find the feeds automatically, like <a href="https://chromewebstore.google.com/detail/get-rss-feed-url/kfghpdldaipanmkhfpdcjglncmilendn" target="_blank">this one</a>. They are your best bet, usually, but let's say you can't or don't want to use extensions. Then there's some patterns you can <i>exploit</i>. For example, usually Wordpress based sites (wich are numerous) hide their automatically generated <abbr>RSS</abbr> feeds on /feed/. For example, let's say this was a Wordpress site (which it's not) and you wanted to get the feed for it. Then you'd go to https://pigamer37.github.io/feed/ and try your luck (there's some more of these patterns in <a href="https://researchbuzz.me/2023/07/06/rss-2/#h.up6e5ojczetb" target="_blank">the ResearchBuzz article</a>). If none of these methods worked, the page might not have an <abbr>RSS</abbr> feed, sadly :_( Speaking of which, if you have a website, you wouldn't want to disappoint possible readers by not having a feed, right? Don't worry, it's not too difficult:</p>
          <h1>How do I make a feed?</h1>
          <p>As always, there won't be a better feed than the one you make by hand, understanding each item. It's not too dificult! The RSS's Board has <a href="https://www.rssboard.org/rss-specification" target="_blank">the full specification</a>, it's not too long and it's well explained. They also have <a href="https://www.rssboard.org/rss-validator" target="_blank">a validator</a> and <a href="https://www.rssboard.org/rss-autodiscovery" target="_blank">a section that explains how to make your feed discoverable automatically</a> (by extensions or feed readers, for example).</p>
          <ins datetime="2025-01-16">In the case of podcasts, you can make it by hand too by following <a href="https://help.apple.com/itc/podcasts_connect/#/itcb54353390" target="_blank">Apple's Itunes Podcast RSS Feed requirements and recommendations</a>, and using <a href="https://podcasters.apple.com/support/829-validate-your-podcast" target="_blank">their recommended validators</a>. There's also sites like <a href="https://rss.com/" target="_blank">RSS.com</a> that promise to handle not only a podcast's RSS feed but many more adjacent things (but it isn't free). I don't know more resources right now, and in fact I know of this one just because I researched how the folks over at the <a href="https://rss.com/podcasts/gl-hf/" target="_blank">gl;hf podcast</a> were doing their syndication.</ins>
          <p>Too much work? I made <a href="https://kbs-lucas.nekoweb.org/RSS-Generator" target="_blank">an online tool that let's you make a feed automatically</a>, just by filling out a form. It's WIP but I'm trying to make it foolproof, you can even validate the feed you are working on via the previously mentioned validator in just one click! If you compare what it produces with what my own feed looks like, you'll see that it's nearly identical, and that's not by chance! I mainly tried to automate the process of updating my feed for myself, and just expanded to make it accesible to everyone. It follows the RSS Board's specifications and recommendations (<span style="font-style:italic">mostly</span>, as I said it's still WIP but it's like 95% done, and usable right now). Feel free to use it and make suggestions about it via any of my <a href="/socials">socials</a>. You'll still need to <a href="https://www.rssboard.org/rss-autodiscovery" target="_blank">make your feed discoverable automatically</a> (it's just a link tag in your homepage, after all), and I'd suggest making a link or a button to your feed also, like <a href="/#RSS" >this one</a>. <ins datetime="2025-01-16">I made <a class="no-external" href="https://kbs-lucas.nekoweb.org/RSS-Gen-Podcast" target="_blank">a similar tool specifically for podcast feeds</a>, because they have different requirements. Right now it's totally usable (I even recreated the previously mentioned gl;hf feed with it, because I don't have a podcast), but I plan on supporting even more optional features.</ins></p>
          <strong>Happy syndicating!</strong>
      ]]> </content:encoded>
    	<category>Programming</category>
    	<pubDate>Wed, 13 Nov 2024 16:11:39 GMT</pubDate>
    	<guid>https://pigamer37.github.io/posts/RSS_Explanation</guid>
    </item>
    <item>
        <title>Dungeon Meshi Review</title>
        <link>https://pigamer37.github.io/posts/Dungeon_Meshi_Review</link>
        <description>My experience with Dungeon Meshi S1 and how I was pleasantly surprised by a constant tide of creativity (with a spoiler free section)</description>
        <content:encoded><![CDATA[
          <h1><span style="color: red;"><strong>NO SPOILER</strong></span> section: What is <cite>Dungeon Meshi</cite>?</h1>
          <p>I just finished the first season of <cite>Dungeon Meshi</cite> <time datetime="2024-10-03">(03/10/2024)</time>, and wow, what a series. What we got for now it's about half of the story, but just this was absolutely fantastic.</p>
          <p><cite>Dungeon Meshi</cite> (or <cite>Delicious in Dungeon</cite>) is a medieval fantasy anime, which sets itself appart immediately with it's premise: our protagonists must <strong>eat</strong> the monsters they encounter in the dungeon to survive. It's not like this is something everybody does on this universe, quite the contrary!</p>
          <figure class="inside-p-right" style="width: clamp(300px, 45vi, 100%)">
          <img decoding="async" class="center" title="Dungeon Meshi Chapter 1: page 17" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj8AozqVz44P6W8RMkmwWh4vW02hyphenhyphenEIJ_Q8FcpSmaI5b7KF2MNPVfJLnzjEHpQSmFSNJF-miKv39P9_WgYfDdBE0Fg78DzgnO1rkZuRD4i3hHMvQm6Dl99gceezEjNcj-QFBqfNOPC3UBQ7nq0JmxIdzCj7pq04vglLSo5bqtbaguIM66lI0_sHiNM5I3I/s1600/17.jpg" alt="Page 17 of Dungeon Meshi Chapter 1" fetchpriority="high">
          <figcaption>One of the first pages of the <cite>Dungeon Meshi</cite> manga, explaining the concept</figcaption>
          </figure>
          <p>This by itself would have made for a very original story, where we would have been surprised by the iventive ways to cook fantasy beings we all know and love, like golems, ghosts, mandrakes, basilisks, cockatrices, kelpies, etc. and some brand new monsters too, but also all the intricacies of the dungeon ecosystem, accompanied by studio Trigger's beautiful animation, which from what I've seen closely resembles the manga's style; Also, the universe is not framed in a <em>video&hyphen;gamy</em> way, referencing <abbr title="Health/Hit Points">HP</abbr> or <abbr title="Experience">XP</abbr>, but in a realistic way. It's more like <cite>Lord of the Rings</cite> than <cite>Sword Art Online</cite> in that way, which feels fresh in anime, at least for me. However, that's not all of what Ryōko Kui (I found <a href="https://nisiryu.blogspot.com/" target="_blank">her blog</a>) has in store for us. The reason why they adopt this peculiar habit eventually becomes very central, with both the monster cooking and the actual subyacent plot being paralell driving forces, especially a few episodes in.</p>
          <p>In the first few minutes (or pages) we see Laios (who is the leader of the group) watching in fear as his sister Falin succumbs to a red dragon. This event leaves him and the rest of the party in a pretty bad state, both mentally and economically, because most of their equipment gets lost in the process of retreating. The premise of the show is caused by this lack of money, and therefore food, while they try to get back into the deep levels of the dungeon to rescue Falin before it's too late. Little by little, the main gang members' relationships, memories and past are revealed to us, fleshing them and Falin out (even when she is offscreen). Most of the anime is very bubbly, funny and cutesy, but around episode 12 a more visceral side shows up, which I didn't expect, but I'm all for it. Without getting into spoiler territory, there's some light gore and body horror.</p>
          <p>If any of this got your attention, please go consume (pun absolutely intended) this great piece of media, be it via manga or anime. At the time of writing, just the first season of the series has been released, and it adapts about half of the manga's chapters from what I've read. I found <a href="https://dungeon-meshi.online/" target="_blank">this website</a> where you can start reading the manga, which is finished. In fact, I might start doing that myself, because waiting for the second season to come out seem too long to wait. In fact, one of my close friends has already read the manga and it's eager for me to finish it to talk about the whole thing freely. And about the anime, I just can direct you to <a href="https://www.netflix.com/es-en/title/81564899" target="_blank">Netflix</a> because they hold exclusive rights to it at the moment, unless you want to sail the high sea... *wink wink*</p>
          <p>Now let's dive into spoilers for the first season. From here onwards I'm assuming you've watched the first season or read until chapter 52 (this is what the first season of the anime adapts, to my knowledge). Click below to reveal.</p>
          <details style="clear:both;"><summary><h2 style="display: inline;">SPOILER SECTION</h2> (click to see)</summary>
            <p>Wasn't that awesome? Did you expect Falin to be dead? Did you expect Marcille to use black blood magic to get her back? Did you expect her to become a FREACKING BIRD DRAGON HUMAN HYBRID??? I certainly didn't. I fully expected the series to be a silly good time until episode 12, like I said. Also, all the backstory between Marcille and Falin(? They're so cute! I loved all the ways they prepared monsters and explained the mechanics of the dungeon and the magic system. I liked Izutsumi, her situation paralelling that of Falin's, although I didn't like how cold and surly she was for all this season. Hopefully she warms up a little to the party.</p>
            <p>With the last episode fresh on my mind, I'm eager to see the golden lion, the mad mage and to see if the implications of cannibalism do come true and work to separate Falin's soul from the dragon's.</p>
          </details>
        ]]> </content:encoded>
        <pubDate>Mon, 07 Oct 2024 08:23:51 GMT</pubDate>
        <category>Personal</category>
        <category>Anime</category>
        <category>Media</category>
        <guid>https://pigamer37.github.io/posts/Dungeon_Meshi_Review</guid>
    </item>
    <item>
        <title>My monthly playlist KB Radio (FM)</title>
        <link>https://pigamer37.github.io/posts/Monthly_playlist_KB_FM</link>
        <description>An explanation on the monthly music playlist concept and some of this month's content</description>
        <content:encoded><![CDATA[
        <h1>I present to you: <span style="color: red;"><strong>my monthly playlist, KB Radio (FM)</strong></span></h1>
          <p>Have you ever wanted to know what a seasoned music listener (currently my main playlist spans 2270 songs) finds during a month? Well, here you go:</p>
          <iframe style="border-radius:12px" src="https://open.spotify.com/embed/playlist/42w2GD51boaQrw7it78z7G?utm_source=generator" width="100%" height="352" frameBorder="0" allowfullscreen="" allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" loading="lazy"></iframe>
          <p>Because the above is a live view of the playlist, you might see a different version of it depending on when you are reading this. And that's exactly the gimmick! Each month, I collect all of the music I discovered the previous month. For example, today I have to update it so it contains September's discoveries.</p>
          <p>I love getting to hear new music, specially if it's from loved ones or good friends. I'm always asking them to send me whatever song it's playing from their library so I can listen to it later, and in times when music hunting is a bit slow, I usually ask for recommendations directly. It's one of the ways I get to know someone. You may not know me (or want to know me) personally, but you may want to hear new music and see if you like it. That's what this playlist is for.</p>
          <p>I try to listen to everything I come across, regardless of genre. This will sometimes result in incoherent listening sessions for my friends XD, but I think it's trully rewarding. Each genre is very diverse, so even if you think you don't like one, in my experience there's always some artist or album that breaks this tendency. I obviously have my preferences, like everybody else. I love rock and metal, so those and all their subgenres (like nu-metal, grunge, punk, djent, etc.) will likely be present in most instances of this playlist. I also love indie, funk, rap and phonk, but as I said, sometimes you'll get wildcards in there like salsa, jazz, cumbia, hyperpop... expect the unexpected.</p>
          <p>Speaking about this month's instance now, we have some unexpected artists if you are not versed in metal culture, Linkin Park and Poppy:</p>
          <h2>Linkin Park's back!</h2>
          <p>Linkin Park's return to action was teased for a short time before playing live and making a livestream of the event. That same day, they released the live gig's opener <a class="Spotify" href="https://open.spotify.com/track/2PnlsTsOTLE5jnBnNe2K0A?si=3242f641bf0d4ca7" target="_blank"><cite>The Emptiness Machine</cite></a>, the first single with their new vocalist: Emily Armstrong. Let's adress the elephant in the room: no one will be able to substitute previous vocalist Chester Bennington. However, I don't think Linkin Park is trying to do that, and neither should fans. I think they are trying to make a new chapter, honoring the past material and making new music. Speaking of which, I was pleasantly surprised by the new singer and drummer, they nailed the old songs and had great stage pressence. I also loved the new singles, <cite>The Emptiness Machine</cite>'s drum and bass groove and amazing screams where stuck on loop on mine and some friend's earphones. Try listening to the bridge and ending chorus without getting goosebumps. <a class="Spotify" href="https://open.spotify.com/track/3fgehc497TFqKH1zBL2YNK?si=78c87b7cb728422f" target="_blank"><cite>Heavy is the crown</cite></a> was unveiled as the <i>League of Legends Esports (Worlds)</i> song, and I also like it, even if I like the first one more. Both of these tracks will be featured in their upcoming album and are present in this month playlist.</p>
          <h2>Poppy? The <i>I'm Poppy</i> Poppy???</h2>
          <p>Yeah. You may know Poppy from her weird run on YouTube making liminal and sureal videos making it look like she was an android. She has carried that creativity into her music, which started following that concept, but quickly deviated into a more emotinal direction, now focused on metal and industrial styles mixed with electronic music. Her previous album, Zig, was very unique and I thoroughly liked it. The artist has recently made colaborations with Bad Omens <cite>(<a class="Spotify" href="https://open.spotify.com/track/2WtFbotxC95UD2r1RzE036?si=80f6a5e7b6cd49c8" target="_blank">V.A.N</a>)</cite> and Knocked Loose <cite>(<a class="Spotify" href="https://open.spotify.com/track/6PXYOVPBzO3xojFhQAvmde?si=be6141133c7949c5" target="_blank">Suffocate</a>)</cite>, and has appeared in a Spiritbox gig. She has unique style, not only instrumentally but vocally. She can do the softest singing, robotic (almost talking) verses, powerfully belted choruses and gut wrenching screams (in the best way possible), and sometimes even in the same song. Her screaming style is very characteristic too, high pitched but aggressive. You can always tell if it's Poppy screaming. She has released a new single off of what it seems to be a new album, called <a class="Spotify" href="https://open.spotify.com/track/27g7prKPpfUtaPOBjO1hQ1?si=3215bcf65a594135" target="_blank"><cite>they're all around us</cite></a>, and I consider it an absolute banger.</p>
          <h2>Other noteworthy stuff</h2>
          <p>Also included in this instance is the new Childish Gambino's new single <a class="Spotify" href="https://open.spotify.com/track/3uC4r2daXertBxxc8BpbbN?si=1abe5f30620c4f10" target="_blank"><cite>Lithonia</cite></a>, which to my knowledge is his first dip into rock. It's more of an indie-rock style, using a piano-<wbr/>like synth and soft, catchy back-up vocals. I also discovered Rolo Tomassi, I have to dip my toes into their catalogue, but they seem like a nice discovery. One of my favourite bands, Sexy Zebras, released their new single <a class="Spotify" href="https://open.spotify.com/track/3uC4r2daXertBxxc8BpbbN?si=1abe5f30620c4f10" target="_blank"><cite>Mañana no existe</cite></a>, a spanish rock song which overall message is <i>Carpe Diem</i>. Gaming rap-<wbr/>rock-<wbr/>pop trio Starbomb is brewing a <a class="Spotify" href="https://open.spotify.com/prerelease/1vHzziIw74SuvKhE6Am83Q?si=e83e89b5ff8c419b" target="_blank">new album</a>, and it has a confirmed release date of <time datetime="2024-10-25">October 25th, 2024</time>. They have released two singles so far, and I didn't <strong>love</strong> <a class="Spotify" href="https://open.spotify.com/track/0DH6xKuXR5ZQkeAEWtZtsi?si=8a7fae8ce62540ca" target="_blank"><cite>Pokémon Smash or Pass</cite></a>, but <a class="Spotify" href="https://open.spotify.com/track/5M6LqY0MXpKwPo9uakkfIq?si=f79b0fba9e9d415a" target="_blank"><cite>Nintendo Online's Greatest Announcement</cite></a> was great (pun intended). Finally, I got into Clown Core. Mixing metal (especially djent or groove metal), jazz and honks, they are weird, I know, but if you shed your prejudice and take a <strong>real</strong> and <strong>unbiased</strong> listen, it may be one of the most interesting musical experiences you'll ever get. <a class="Spotify" href="https://open.spotify.com/track/7L5T0IutG8MyDnucOVccdU?si=0327066932424000" target="_blank"><cite>Infinite Realm of Incomprehensible Suffering</cite></a> is a soothing jazzy pop track, very straightforward, don't let the name fool you, it may serve as a normal introduction to the duo. I imagine it played on an elevator or as a witing tone for a call center. <a class="Spotify" href="https://open.spotify.com/track/2mlh8fBK1wFPW5PgHYCjbN?si=50c93f9d62854b00" target="_blank"><cite>Flat Earth</cite></a> starts the shenanigans.</p>
          <p>Did I win you over? Do you want to take a peek at some of the stuff I mentioned? <a class="Spotify" href="https://open.spotify.com/playlist/42w2GD51boaQrw7it78z7G?si=JKJcvopvSxiNFFNqQ5PHJQ" target="_blank">Here's a link to the playlist</a>. Enjoy!</p>
        ]]> </content:encoded>
        <pubDate>Tue, 01 Oct 2024 14:00:10 GMT</pubDate>
        <category>Personal</category>
        <category>Music</category>
        <guid>https://pigamer37.github.io/posts/Monthly_playlist_KB_FM</guid>
    </item>
    <item>
        <title>Update 1</title>
        <link>https://pigamer37.github.io/posts/Update_1_19-09-2024</link>
        <description>First post on this site! Explaining my situation and future plans.</description>
        <content:encoded><![CDATA[
        <p><span style="color: red;"><strong>I just (yesterday) presented mi Final Degree Project!!</strong></span><br>
          I'm so happy I finally can really call myself an engineer! I finally have time to do many things I put in the back burner because of uni (although I'm already working for a big spanish engineering company 😎🤓, so I have some obligations still): from catching up on series, anime, videogames, books... to making some personal projects like learning how to build this website (and doing it) or making a device for drumkits that lights <abbr title="Light Emitting Diode">LEDs</abbr> up on impact. Yeah, I play the drums, I forgot to mention. I think I will create a section on this site dedicated to my musical ventures (mainly the bands I'm on at the moment and the ones I've been part of &quot;historically&quot;).</p>
          <aside><details><summary><strong>Brief techical aside:</strong></summary>
          I plan on using piezoelectric sensors, LEDs and some microcontroller. I have an Arduino Mega and some STM32 board named Discovery or something, I can't quite remember the name. I'm planning on using interruptions as the main sensor mechanism, because a drumkit usually has more than one drum (I won't light up cymbals) and seems like an intuitive way to do it, rather than polling for each sensor's signal. I've been told that Arduino boards' interruption systems are kinda... meh. Too slow, blocking execution while changing context, so I'll have to try with the Mega (maybe they were refering to just the Arduino UNO(? ), because I've already used interruptions on the other board and I know they work very nicely. I plan on documenting the process here, so be ready!
          </details></aside>
          <p>I am so pumped to be &quot;free&quot;. Sometimes academics, specially in <abbr title="Science, Technology, Engineering and Maths">STEM</abbr> fields can be very taxing. In my case, the type of learning some teachers want from you is not compatible with how my brain works, at least in my uni. I need to understand the problem, not memorize the solution. I need to know <em>why</em> im doing something, and if I do, that solution usually comes naturally then. I don't know if I'm making any sense XD. Maybe next year I will think about doing a Masters degree, I've heard is more specialized, but not as taxing. We'll see, I guess.<br>
          Anyways, as I said, I'm going to &quot;take control&quot; of my free time again. I'm so excited.</p>
          <p><abbr title="Post Scriptum">P.S.</abbr>: Thanks again (and forever) to everyone who made that part of my life bearable. Family, friends, coleagues... You know who you are! 😉</p>
        ]]> </content:encoded>
        <!--RFC 2822 - https://timestampgenerator.com/-->
        <pubDate>Thu, 19 Sep 2024 11:05:28 +0200</pubDate>
        <category>Personal</category>
        <category>Electronics</category>
        <category>Robotics</category>
        <category>Programming</category>
        <guid>https://pigamer37.github.io/posts/Update_1_19-09-2024</guid>
    </item>

</channel>
</rss>